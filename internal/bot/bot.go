package bot

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go-ovpn-bot/internal/config"
	"go-ovpn-bot/internal/database"
	"go-ovpn-bot/internal/ovpn"
)

type Bot struct {
	api         *tgbotapi.BotAPI
	config      *config.Config
	db          *database.DB
	ovpnService *ovpn.Service
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	waitingForCode map[int64]bool
}

func New(cfg *config.Config, db *database.DB, ovpnService *ovpn.Service) *Bot {
	bot, err := tgbotapi.NewBotAPI(cfg.BotToken)
	if err != nil {
		log.Fatalf("Failed to create bot: %v", err)
	}

	bot.Debug = cfg.Debug

	return &Bot{
		api:            bot,
		config:         cfg,
		db:             db,
		ovpnService:    ovpnService,
		waitingForCode: make(map[int64]bool),
	}
}

func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	if b.config.Debug {
		log.Println("Bot started successfully in DEBUG mode")
	} else {
		log.Println("Bot started successfully")
	}

	for update := range updates {
		if b.config.Debug {
			log.Printf("Received update: %+v", update)
		}
		
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallbackQuery(update.CallbackQuery)
		}
	}

	return nil
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	if b.config.Debug {
		log.Printf("Handling message from user %d (%s): %s", 
			message.From.ID, message.From.UserName, message.Text)
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := b.db.GetOrCreateUser(
		int64(message.From.ID),
		message.From.UserName,
	)
	if err != nil {
		log.Printf("Failed to get/create user: %v", err)
		b.sendMessage(message.Chat.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
	if b.waitingForCode[user.ID] {
		b.handleActivationCode(message, user)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	switch {
	case strings.HasPrefix(message.Text, "/start"):
		b.handleStartCommand(message, user)
	case strings.HasPrefix(message.Text, "/add"):
		b.handleAddCommand(message, user)
	case strings.HasPrefix(message.Text, "/remove"):
		b.handleRemoveCommand(message, user)
	case strings.HasPrefix(message.Text, "/code"):
		b.handleCodeCommand(message, user)
	default:
		b.sendMessage(message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	}
}

func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := b.db.GetOrCreateUser(
		int64(query.From.ID),
		query.From.UserName,
	)
	if err != nil {
		log.Printf("Failed to get/create user: %v", err)
		b.answerCallbackQuery(query.ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ
	data := query.Data
	if strings.HasPrefix(data, "remove_") {
		configIDStr := strings.TrimPrefix(data, "remove_")
		configID, err := strconv.ParseInt(configIDStr, 10, 64)
		if err != nil {
			b.answerCallbackQuery(query.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
			return
		}

		b.handleRemoveConfigCallback(query, user, configID)
	} else if data == "cancel_remove" {
		b.handleCancelRemoveCallback(query)
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	b.answerCallbackQuery(query.ID, "")
}

func (b *Bot) handleStartCommand(message *tgbotapi.Message, user *database.User) {
	text := `üîê *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OpenVPN Bot!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /add - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
‚Ä¢ /remove - –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
‚Ä¢ /code - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞

*–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:* ` + fmt.Sprintf("%d", len(user.Configs)) + `
*–í–∞—à –ª–∏–º–∏—Ç:* ` + fmt.Sprintf("%d", user.Limit)

	b.sendMessage(message.Chat.ID, text)
}

func (b *Bot) handleAddCommand(message *tgbotapi.Message, user *database.User) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if user.Limit <= len(user.Configs) {
		b.sendMessage(message.Chat.ID, 
			"‚ùå –£ –≤–∞—Å –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π!\n\n"+
			"*–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç:* "+fmt.Sprintf("%d", user.Limit)+"\n"+
			"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:* "+fmt.Sprintf("%d", len(user.Configs))+"\n\n"+
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /code –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	b.sendMessage(message.Chat.ID, "‚è≥ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")

	clientName, configPath, err := b.ovpnService.CreateClient()
	if err != nil {
		log.Printf("Failed to create client: %v", err)
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	config, err := b.db.CreateConfig(user.ID, clientName, configPath)
	if err != nil {
		log.Printf("Failed to save config to database: %v", err)
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
		return
	}

	// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
	configData, err := b.ovpnService.ReadConfigFile(configPath)
	if err != nil {
		log.Printf("Failed to read config file: %v", err)
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
	file := tgbotapi.NewDocument(message.Chat.ID, tgbotapi.FileBytes{
		Name:  clientName + ".ovpn",
		Bytes: configData,
	})
	file.Caption = fmt.Sprintf("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è *%s* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", clientName)

	if _, err := b.api.Send(file); err != nil {
		log.Printf("Failed to send config file: %v", err)
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	user.Configs = append(user.Configs, *config)
}

func (b *Bot) handleRemoveCommand(message *tgbotapi.Message, user *database.User) {
	if len(user.Configs) == 0 {
		b.sendMessage(message.Chat.ID, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for _, config := range user.Configs {
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üóëÔ∏è %s", config.Name),
			fmt.Sprintf("remove_%d", config.ID),
		)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
	cancelButton := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_remove")
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{cancelButton})

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(keyboard...)

	text := "üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*"
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = inlineKeyboard

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("Failed to send remove menu: %v", err)
	}
}

func (b *Bot) handleRemoveConfigCallback(query *tgbotapi.CallbackQuery, user *database.User, configID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	config, err := b.db.GetConfigByID(configID)
	if err != nil {
		log.Printf("Failed to get config: %v", err)
		b.answerCallbackQuery(query.ID, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if config.UserID != user.ID {
		b.answerCallbackQuery(query.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
		return
	}

	// –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ OpenVPN —Å–∫—Ä–∏–ø—Ç
	if err := b.ovpnService.RemoveClient(config.Name, config.FilePath); err != nil {
		log.Printf("Failed to remove client: %v", err)
		b.answerCallbackQuery(query.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
		return
	}

	// –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	if err := b.db.DeleteConfig(configID); err != nil {
		log.Printf("Failed to delete config from database: %v", err)
		b.answerCallbackQuery(query.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	text := fmt.Sprintf("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è *%s* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", config.Name)
	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)
	msg.ParseMode = "Markdown"

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("Failed to send confirmation: %v", err)
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
}

func (b *Bot) handleCancelRemoveCallback(query *tgbotapi.CallbackQuery) {
	text := "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
	msg := tgbotapi.NewMessage(query.Message.Chat.ID, text)

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("Failed to send cancel message: %v", err)
	}

	b.answerCallbackQuery(query.ID, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
}

func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"

	if _, err := b.api.Send(msg); err != nil {
		log.Printf("Failed to send message: %v", err)
	}
}

func (b *Bot) answerCallbackQuery(callbackQueryID, text string) {
	callback := tgbotapi.NewCallback(callbackQueryID, text)
	if _, err := b.api.Request(callback); err != nil {
		log.Printf("Failed to answer callback query: %v", err)
	}
}

// handleCodeCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /code
func (b *Bot) handleCodeCommand(message *tgbotapi.Message, user *database.User) {
	b.waitingForCode[user.ID] = true
	b.sendMessage(message.Chat.ID, 
		"üîë *–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞*\n\n"+
		"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.\n\n"+
		"–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã).")
}

// handleActivationCode –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
func (b *Bot) handleActivationCode(message *tgbotapi.Message, user *database.User) {
	code := strings.TrimSpace(message.Text)
	
	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
	delete(b.waitingForCode, user.ID)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞
	if len(code) != 10 {
		b.sendMessage(message.Chat.ID, 
			"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!\n\n"+
			"–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 10 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã).")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
	if !isValidCode(code) {
		b.sendMessage(message.Chat.ID, 
			"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!\n\n"+
			"–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã (a-z, A-Z) –∏ —Ü–∏—Ñ—Ä—ã (0-9).")
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	activationCode, err := b.db.GetActivationCodeByCode(code)
	if err != nil {
		b.sendMessage(message.Chat.ID, 
			"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π!\n\n"+
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.")
		return
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
	if activationCode.Status != "active" {
		b.sendMessage(message.Chat.ID, 
			"‚ùå –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n"+
			"–≠—Ç–æ—Ç –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ.")
		return
	}
	
	// –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	newLimit := user.Limit + activationCode.Limit
	if err := b.db.UpdateUserLimit(user.ID, newLimit); err != nil {
		log.Printf("Failed to update user limit: %v", err)
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}
	
	// –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
	if err := b.db.UseActivationCode(activationCode.ID); err != nil {
		log.Printf("Failed to mark code as used: %v", err)
		// –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ª–∏–º–∏—Ç —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω
	}
	
	// –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç –≤ –æ–±—ä–µ–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user.Limit = newLimit
	
	b.sendMessage(message.Chat.ID, 
		fmt.Sprintf("‚úÖ *–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"+
		"*–î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –ª–∏–º–∏—Ç—É:* %d\n"+
		"*–ù–æ–≤—ã–π –ª–∏–º–∏—Ç:* %d\n"+
		"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:* %d\n\n"+
		"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!",
		activationCode.Limit, newLimit, len(user.Configs)))
}

// isValidCode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
func isValidCode(code string) bool {
	for _, char := range code {
		if !((char >= 'a' && char <= 'z') || 
			 (char >= 'A' && char <= 'Z') || 
			 (char >= '0' && char <= '9')) {
			return false
		}
	}
	return true
}

// generateActivationCode –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
func generateActivationCode() string {
	rand.Seed(time.Now().UnixNano())
	
	const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	code := make([]byte, 10)
	
	for i := range code {
		code[i] = charset[rand.Intn(len(charset))]
	}
	
	return string(code)
}
